  {{- /* ---------------------------------------------------------------
      REQUIRED ITEMS
      Note these are vars that have no default value in values.yaml
---------------------------------------------------------------------- */ -}}
{{ $_ := required "image.repository is REQUIRED!" .Values.image.repository }}
{{ $_ := required "image.tag is REQUIRED!" .Values.image.tag }}
{{ $_ := required "app.name is REQUIRED!" .Values.app.name }}
{{ $_ := required "app.context is REQUIRED!" .Values.app.context }}
{{ $_ := required "app.environment is REQUIRED!" .Values.app.environment }}
{{ $_ := required "healthcheck.liveness.containerPort is REQUIRED!" .Values.healthcheck.liveness.containerPort }}
{{ $_ := required "healthcheck.readiness.containerPort is REQUIRED!" .Values.healthcheck.readiness.containerPort }}

{{ if .Values.bootstrapSecret.enabled }}
  {{ $_ := required "bootstrapSecret.k8Secret.secretValue is REQUIRED!" .Values.bootstrapSecret.k8Secret.secretValue }}
{{- end }}

{{- /* ---------------------------------------------------------------
      VARIABLE/SETUP Auto Generated vars
---------------------------------------------------------------------- */}}
{{- $_ := set . "bootstrapSecretFilePath" (printf "%s/%s" .Values.bootstrapSecret.mount.path .Values.bootstrapSecret.mount.fileName) -}}
{{- $_ := set . "k8sSafeName_imageTag" (.Values.image.tag | replace "." "-") -}}


{{- define "shortener.tpl" }}
{{- $full :=  . -}}
{{- $short :=  $full | replace "-" "_" | replace "." "_" | camelcase -}}
{{- $hash :=  $full | adler32sum -}}
{{- $final :=  (gt (len $full) 63) | ternary $short $full -}}
{{- $final :=  (gt (len $final) 63) | ternary $hash $final -}}
{{- $final -}}
{{- end }}

{{- /* ---------------------------------------------------------------

  fullAppIdentifier

 This is annoying, due to lack of reliable ternary operators and nested IF garbage
 in golang conditionals and variable scope, we have no scratch like key-resolver...
 helm uses http://masterminds.github.io/sprig under the covers nicely.

--------------------------------------------------------------- */}}
{{- $tmpFullAppId := printf "%s-%s-%s-%sREMOVEME" (tpl .Values.app.shortName .) .Values.app.context .k8sSafeName_imageTag .Values.app.classifier -}}
{{- $tmpFullAppId := $tmpFullAppId | replace "-REMOVEME" "" -}}
{{- $tmpFullAppId := $tmpFullAppId | replace "REMOVEME" "" -}}
{{- $tmpFullAppId := $tmpFullAppId | replace "-%!s(<nil>)" "" -}}
{{ $_ :=  set . "fullAppIdentifier_full" $tmpFullAppId }}
{{ $_ :=  set . "fullAppIdentifier_short" ($tmpFullAppId | replace "-" "_" | replace "." "_" | camelcase) }}
{{ $_ :=  set . "fullAppIdentifier_hash" ($tmpFullAppId | adler32sum) }}
{{ $_ :=  set . "fullAppIdentifier" ((gt (len .fullAppIdentifier_full) 63) | ternary .fullAppIdentifier_short .fullAppIdentifier_full)}}
{{ $_ :=  set . "fullAppIdentifier" ((gt (len .fullAppIdentifier) 63) | ternary (printf "%s-%s-%s" .Values.app.name .Values.app.context .fullAppIdentifier_hash) .fullAppIdentifier)}}


{{- /* ---------------------------------------------------------------
      bootstrapSecretName
--------------------------------------------------------------- */}}
{{- $_ := set . "bootstrapSecretName" (printf "bootstrapsecret-%s" .fullAppIdentifier) -}}


{{- /* ---------------------------------------------------------------
  serviceAccountName
--------------------------------------------------------------- */}}
{{- $_ := set . "serviceAccountName" (tpl .Values.serviceAccount.name .) -}}



{{- /* ---------------------------------------------------------------
      Standard Labels TEMPLATE
      Usage {{ include "stdlabels.tpl" $stdlabelsargs | indent N }}
--------------------------------------------------------------- */}}
{{- $_ := set . "stdlabelsargs" (dict "root" $) }}

{{- define "stdlabels.tpl" }}
"{{ .root.Values.labelNames.appName }}": {{ .root.Values.app.name }}
"{{ .root.Values.labelNames.appContext }}": {{ .root.Values.app.context }}
"{{ .root.Values.labelNames.appEnvironment }}": {{ .root.Values.app.environment }}
"{{ .root.Values.labelNames.appVersion }}": {{ .root.Values.image.tag }}
"{{ .root.Values.labelNames.hashId }}": "{{ .root.fullAppIdentifier_hash }}"
{{ if .root.Values.app.classifier }}
"{{ .root.Values.labelNames.appClassifier }}": {{ .root.Values.app.classifier }}
{{ end }}
"{{ .root.Values.labelNames.creatorId }}": "{{ .root.Values.creatorId | replace "@" "_" }}"
"app.kubernetes.io/name": {{ .root.Values.app.name }}
"app.kubernetes.io/managed-by": {{ .root.Release.Service }}
"app.kubernetes.io/instance": {{ .root.fullAppIdentifier }}
"app.kubernetes.io/version": {{ .root.Values.image.tag }}
"app.kubernetes.io/part-of": {{ .root.Values.app.name }}
"app.kubernetes.io/component": "app"
"helm.sh/chart": {{ .root.Chart.Name }}-{{ .root.Chart.Version }}
{{- end }}



{{- /* ---------------------------------------------------------------
    Bootstrap Secret TEMPLATE

    (used by main deploy + optional hook-jobs)

    Usage {{ include "secret.tpl" [arg] | indent N }}

    Params: [arg] must be a dict with the following structure:
    ---------
      root: $
      bootstrapSecretName: name of secret to create
      bootstrapSecret: (dict)
        k8Secret:
          valueKey:
          secretValue:
      annotations: (dict OPTIONAL)
        [annotation-name]: [annotation-value]
        [annotation-name]: [annotation-value]
        ...
--------------------------------------------------------------- */}}
{{- define "secret.tpl" }}
---
apiVersion: v1
kind: Secret
metadata:
  namespace: {{ .root.Release.Namespace }}
  name: {{ .bootstrapSecretName }}
  labels:
    {{ include "stdlabels.tpl" .root.stdlabelsargs | indent 4 }}

  {{ if hasKey . "annotations" }}
  annotations:
    {{ range $name,$val := .annotations }}
    "{{$name}}": "{{ $val }}"
    {{ end }}
  {{ end }}
type: Opaque
stringData:
  {{ .bootstrapSecret.k8Secret.valueKey }}: {{ .bootstrapSecret.k8Secret.secretValue }}
{{- end }}




{{- /* ---------------------------------------------------------------
    Pod "template" TEMPLATE

    (used by main Deployment + optional hook-jobs)

    Usage {{ include "podtemplate.tpl" [arg] | indent N }}

    Params: [arg] must be a dict with the following structure:
    ---------
      root: $
      podconfig:
        podName: (should be generated and set by caller)
        serviceAccountName: (should be generated and set by caller)
        bootstrapSecretName: (should be generated and set by caller)

        labels: (typically from pod.labels )

        (for all below, see values.yaml for structure)
        image:
        restartPolicy:
        imagePullSecrets:
        bootstrapSecret:
        securityContext:
        containerPorts:
        resources:
        healthcheck:
        env:
        command:
--------------------------------------------------------------- */}}
{{- define "podtemplate.tpl" }}
{{ $root := .root }}
template:
  metadata:
    labels:
      {{ include "stdlabels.tpl" .root.stdlabelsargs | indent 6 }}

      {{ if .podconfig.labels }}
        {{- range $label := .podconfig.labels }}
      "{{ $label.name }}": "{{ tpl $label.value $root }}"
        {{- end }}
      {{- end }}
  spec:
    {{- if hasKey .podconfig "restartPolicy" }}
    restartPolicy: {{.podconfig.restartPolicy}}
    {{ end }}

    {{- if hasKey .podconfig "serviceAccountName" }}
    serviceAccountName: {{ .podconfig.serviceAccountName }}
    {{ end }}

    {{- if hasKey .podconfig "imagePullSecrets" }}
    imagePullSecrets:
      {{ range $secretName := .podconfig.imagePullSecrets }}
      - name: {{ $secretName }}
      {{ end }}
    {{ end }}

    {{- if hasKey .podconfig "bootstrapSecret" }}
      {{ if .podconfig.bootstrapSecret.enabled }}
    volumes:
      - name: bootstrap-secret-volume
        secret:
          secretName: {{ .podconfig.bootstrapSecretName }}
          defaultMode: 256
          items:
            - key: {{ .podconfig.bootstrapSecret.k8Secret.valueKey }}
              path: {{ .podconfig.bootstrapSecret.mount.fileName }}
      {{ end }}
    {{ end }}

    containers:
      - name: {{ .podconfig.podName }}
        image: {{ .podconfig.image.repository }}:{{ .podconfig.image.tag }}

        {{- if hasKey .podconfig "securityContext" }}
        securityContext:
          {{ if hasKey .podconfig.securityContext "allowPrivilegeEscalation" }}
          allowPrivilegeEscalation: {{ .podconfig.securityContext.allowPrivilegeEscalation }}
          {{ end }}
          {{ if .podconfig.securityContext.runAsUser }}
          runAsUser: {{ .podconfig.securityContext.runAsUser }}
          {{ end }}
          {{ if .podconfig.securityContext.runAsGroup }}
          runAsGroup: {{ .podconfig.securityContext.runAsGroup }}
          {{ end }}
        {{ end }}

        {{- if hasKey .podconfig "bootstrapSecret" }}
          {{ if .podconfig.bootstrapSecret.enabled }}
        volumeMounts:
          - name: bootstrap-secret-volume
            mountPath: "{{ .podconfig.bootstrapSecret.mount.path }}"
            readOnly: true
          {{ end }}
        {{ end }}

        {{- if hasKey .podconfig "containerPorts" }}
        ports:
          {{- range $containerPort := .podconfig.containerPorts }}
            {{- if $containerPort.classifiers }}
              {{- if has $.Values.app.classifier $containerPort.classifiers }}
          - containerPort: {{ $containerPort.port }}
              {{- end }}
            {{- else }}
          - containerPort: {{ $containerPort.port }}
            {{- end }}
          {{- end }}
        {{ end }}

        {{- if hasKey .podconfig "resources" }}
        resources:
          {{ if and .podconfig.resources.limits -}}
          limits:
            cpu: "{{ .podconfig.resources.limits.cpu }}"
          {{ end -}}
          {{ if and .podconfig.resources.requests -}}
          requests:
            cpu: "{{ .podconfig.resources.requests.cpu }}"
          {{ end -}}
        {{ end }}

        {{- if .podconfig.healthcheck }}
          {{ if .podconfig.healthcheck.liveness }}
            {{ if eq .podconfig.healthcheck.liveness.disabled "false" }}
        livenessProbe:
          httpGet:
            scheme: {{ .podconfig.healthcheck.liveness.scheme }}
            path: {{ .podconfig.healthcheck.liveness.path }}
            port: {{ .podconfig.healthcheck.liveness.containerPort }}
          initialDelaySeconds: {{ .podconfig.healthcheck.liveness.initialDelaySeconds }}
          periodSeconds: {{ .podconfig.healthcheck.liveness.periodSeconds }}
          timeoutSeconds: {{ .podconfig.healthcheck.liveness.timeoutSeconds }}
          failureThreshold: {{ .podconfig.healthcheck.liveness.failureThreshold }}
            {{ end }}
          {{ end }}
          {{- if .podconfig.healthcheck.readiness }}
            {{ if eq .podconfig.healthcheck.readiness.disabled "false" }}
        readinessProbe:
          httpGet:
            scheme: {{ .podconfig.healthcheck.readiness.scheme }}
            path: {{ .podconfig.healthcheck.readiness.path }}
            port: {{ .podconfig.healthcheck.readiness.containerPort }}
          initialDelaySeconds: {{ .podconfig.healthcheck.readiness.initialDelaySeconds }}
          periodSeconds: {{ .podconfig.healthcheck.readiness.periodSeconds }}
          timeoutSeconds: {{ .podconfig.healthcheck.readiness.timeoutSeconds }}
          failureThreshold: {{ .podconfig.healthcheck.readiness.failureThreshold }}
            {{ end }}
          {{ end }}
        {{ end }}

        env:
          {{- range $key, $value := .podconfig.env }}
          - name: {{ $key }}
            {{- if and $value $value.value }}
            value: "{{ tpl $value.value $root }}"
            {{ else }}
            value: ""
            {{- end -}}
          {{- end }}

        {{ if .podconfig.command }}

          {{ if .podconfig.command.command }}
        command: {{ .podconfig.command.command }}
          {{ end }}

          {{ if .podconfig.command.args }}
        args:
          {{ if .podconfig.command.preArgs }}
            {{- range $arg := .podconfig.command.preArgs }}
          - "{{ tpl $arg $root }}"
            {{- end }}
          {{ end }}

          {{- range $arg := .podconfig.command.args }}
          - "{{ tpl $arg $root }}"
          {{- end }}

          {{ if .podconfig.command.preArgs }}
            {{- range $arg := .podconfig.command.postArgs }}
          - "{{ tpl $arg $root }}"
            {{- end }}
          {{ end }}
          {{- end }}
        {{- end }}

{{ end }}






{{- /* ---------------------------------------------------------------
      Version specific RBAC
---------------------------------------------------------------------- */}}
{{- if .Values.serviceAccount.create }}

{{ $serviceAccountNamespace := tpl .Values.serviceAccount.namespace . }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $.serviceAccountName }}
  namespace: {{ $serviceAccountNamespace }}

---
kind: {{ $.Values.serviceAccount.kind }}
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: {{ $serviceAccountNamespace }}
  name: {{ $.serviceAccountName }}
rules:
- apiGroups:
  {{ range $apigroup := $.Values.serviceAccount.apiGroups }}
    - "{{ $apigroup }}"
  {{ end }}
  resources:
  {{ range $resource := $.Values.serviceAccount.resources }}
    - "{{ $resource }}"
  {{ end }}
  verbs:
  {{ range $verb := $.Values.serviceAccount.verbs }}
    - "{{ $verb }}"
  {{ end }}

---
# ClusterRoleBinding | RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: {{ (eq $.Values.serviceAccount.kind "ClusterRole") | ternary "ClusterRoleBinding" "RoleBinding" }}
metadata:
  name: {{ $.serviceAccountName }}
  namespace: {{ $serviceAccountNamespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $.serviceAccountName }}
  namespace: {{ $serviceAccountNamespace }}
subjects:
- kind: ServiceAccount
  name: {{ $.serviceAccountName }}
  namespace: {{ $serviceAccountNamespace }}

{{ end }}





{{- /* ---------------------------------------------------------------
      Version specific Bootstrap Secret

      Here we invoke the secret.tpl defined previously
---------------------------------------------------------------------- */}}

{{ if .Values.bootstrapSecret.enabled }}
{{- $secretargs := dict "root" $ "bootstrapSecretName" .bootstrapSecretName "bootstrapSecret" .Values.bootstrapSecret }}
{{ include "secret.tpl" $secretargs }}
{{ end }}

{{- /* ---------------------------------------------------------------
      Version specific Deployment object

      For the Pod "template" we invoke podtemplate.tpl defined previously
---------------------------------------------------------------------- */}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ $.fullAppIdentifier }}
  labels:
    {{ include "stdlabels.tpl" $.stdlabelsargs | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      "{{ .Values.labelNames.appName }}": {{ .Values.app.name }}
      "{{ .Values.labelNames.appContext }}": {{ .Values.app.context }}
      "{{ .Values.labelNames.appEnvironment }}": {{ .Values.app.environment }}
      "{{ .Values.labelNames.appVersion }}": {{ .Values.image.tag }}
      {{ if .Values.app.classifier }}
      "{{ .Values.labelNames.appClassifier }}": {{ .Values.app.classifier }}
      {{ end }}

{{- $podConfig := dict "podName" .Values.app.name }}
{{- $podTemplateArgs := dict "root" $ "podconfig" $podConfig }}
{{- $_ := set $podConfig "serviceAccountName" .serviceAccountName }}
{{- $_ := set $podConfig "bootstrapSecretName" .bootstrapSecretName }}
{{- $_ := set $podConfig "image" .Values.image }}
{{- $_ := set $podConfig "labels" .Values.pod.labels }}
{{- $_ := set $podConfig "restartPolicy" .Values.restartPolicy }}
{{- $_ := set $podConfig "imagePullSecrets" .Values.imagePullSecrets }}
{{- $_ := set $podConfig "bootstrapSecret" .Values.bootstrapSecret }}
{{- $_ := set $podConfig "securityContext" .Values.securityContext }}
{{- $_ := set $podConfig "containerPorts" .Values.containerPorts }}
{{- $_ := set $podConfig "resources" .Values.resources }}
{{- $_ := set $podConfig "healthcheck" .Values.healthcheck }}
{{- $_ := set $podConfig "env" .Values.env }}
{{- $_ := set $podConfig "command" .Values.command }}
{{ include "podtemplate.tpl" $podTemplateArgs | indent 2 }}


{{- /* ---------------------------------------------------------------
      Version specific Service object
---------------------------------------------------------------------- */}}
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{ $.Release.Namespace }}"
  name: "{{ $.fullAppIdentifier }}"
  labels:
    {{ include "stdlabels.tpl" $.stdlabelsargs | indent 4 }}

    {{- range $label := .Values.service.labels }}
    "{{ $label.name }}": "{{ tpl $label.value $ }}"
    {{- end }}
spec:
  selector:
    "{{ .Values.labelNames.appName }}": {{ .Values.app.name }}
    "{{ .Values.labelNames.appContext }}": {{ .Values.app.context }}
    "{{ .Values.labelNames.appEnvironment }}": {{ .Values.app.environment }}
    "{{ .Values.labelNames.appVersion }}": {{ .Values.image.tag }}
    {{ if .Values.app.classifier }}
    "{{ .Values.labelNames.appClassifier }}": {{ .Values.app.classifier }}
    {{ end }}
  type: {{ .Values.service.type }}
  ports:
  {{- range $containerPort := .Values.containerPorts }}
    {{- if $containerPort.service }}
      {{- if $containerPort.classifiers }}
        {{- if has $.Values.app.classifier $containerPort.classifiers }}
  - protocol: TCP
    name: {{ $containerPort.name }}
    port: {{ $containerPort.port }}
    targetPort: {{ $containerPort.port }}
        {{ end -}}
      {{ else }}
  - protocol: TCP
    name: {{ $containerPort.name }}
    port: {{ $containerPort.port }}
    targetPort: {{ $containerPort.port }}
      {{ end -}}
    {{ end -}}
  {{- end }}






{{- /* ---------------------------------------------------------------
      default.validator.hooks (templates)
      What follows defines a embedded golang template
      that is invoked later at bottom of this file

      arg dict:
        "root" = $
        "objectIdentifier" = create all objects with this "name"
        "containerPort" = containerPort of the Ingress the Hook check is for
---------------------------------------------------------------------- */}}
{{- define "default.validator.hooks" }}

{{/* -------------------------------------
     ConfigMap for Post Install/Upgrade Job
------------------------------------------ */}}
  {{ if .root.Values.hooks.default.postInstallUpgrade.validator.enabled }}

  {{ $hookObjectName := printf "%s-%s-hook-postinstallupgrade-validator" .objectIdentifier (.containerPort.port | toString) }}
  {{ $hookObjectName_short := $hookObjectName | replace "-" "" }}
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $hookObjectName }}
  namespace: "{{ .root.Release.Namespace }}"
  labels:
    {{ include "stdlabels.tpl" .root.stdlabelsargs | indent 4 }}
data:
  healthchecks.config.yaml: |
{{ toYaml .root.Values.hooks.default.postInstallUpgrade.validator.checksConfig | indent 4 }}
  slackalerts.config.yaml: |
{{ toYaml .root.Values.hooks.default.postInstallUpgrade.validator.slackConfig | indent 4 }}

{{/* -------------------------------------
     Post Install/Upgrade Job
------------------------------------------ */}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $hookObjectName_short }}"
  namespace: "{{ .root.Release.Namespace }}"
  labels:
    {{ include "stdlabels.tpl" .root.stdlabelsargs | indent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": {{ .root.Values.hooks.default.postInstallUpgrade.validator.hookDeletePolicy }}
spec:
  backoffLimit: 0 # retry 0 times
  activeDeadlineSeconds: 300 # max run for 10 minutes (i.e. inclusive of retries)
  template:
    metadata:
      name: "{{ $hookObjectName_short }}"
    spec:
      restartPolicy: Never
      volumes:
        - name: config-volume
          configMap:
            name: {{ $hookObjectName }}
      containers:
        - name: {{ regexReplaceAll "[\\._/:]" .root.Values.hooks.default.postDelete.validator.image "-" }}
          image: "{{ .root.Values.hooks.default.postInstallUpgrade.validator.image }}"
          command:
            - "checker.py"
          args:
            - "--check-name"
            {{ if .root.Values.hooks.default.postInstallUpgrade.validator.useIngressHost }}
            - "{{ printf "%s-%s%s" .objectIdentifier (.containerPort.port | toString) .root.Values.ingress.dns.fqdnSuffix }}"
            {{ else }}
            - "{{ printf "%s.%s.svc.cluster.local:%s" .objectIdentifier .root.Release.Namespace (.containerPort.port | toString) }}"
            {{ end }}
            - "--target-root-url"
            {{ if .root.Values.hooks.default.postInstallUpgrade.validator.useIngressHost }}
            - "{{ .containerPort.tls | ternary "https" "http" }}://{{ printf "%s-%s%s" .objectIdentifier (.containerPort.port | toString) .root.Values.ingress.dns.fqdnSuffix }}"
            {{ else }}
            - "{{ .containerPort.tls | ternary "https" "http" }}://{{ printf "%s.%s.svc.cluster.local:%s" .objectIdentifier .root.Release.Namespace (.containerPort.port | toString) }}"
            {{ end }}
            - "--max-retries"
            - "{{ .root.Values.hooks.default.postInstallUpgrade.validator.maxRetries }}"
            - "--sleep-seconds"
            - "{{ .root.Values.hooks.default.postInstallUpgrade.validator.sleepSeconds }}"
            - "--any-check-fail-exit-code"
            - "1"
            - "--tags-qualifier"
            - "{{ .containerPort.port }}"
            - "--extra-slack-context-props"
            - "creatorId={{ .root.Values.creatorId }}"
            - "--checksdb-filename"
            - "/etc/hc-config/healthchecks.config.yaml"
            - "--slack-config-filename"
            - "/etc/hc-config/slackalerts.config.yaml"
            {{ if .root.Values.hooks.default.postInstallUpgrade.validator.debugOutput }}
            - "--verbose-output"
            - "--debug-slack-jinja2-context"
            {{ end }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/hc-config
  {{ end }}



{{/* -------------------------------------
     ConfigMap for Post Delete Job
------------------------------------------ */}}
  {{ if .root.Values.hooks.default.postDelete.validator.enabled }}

    {{ $hookObjectName := printf "%s-%s-hook-postdelete-validator" .objectIdentifier (.containerPort.port | toString) }}
    {{ $hookObjectName_short := $hookObjectName | replace "-" "" }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $hookObjectName }}
  namespace: "{{ .root.Release.Namespace }}"
  labels:
    {{ include "stdlabels.tpl" .root.stdlabelsargs | indent 4 }}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-failed,before-hook-creation
data:
  healthchecks.config.yaml: |
{{ toYaml .root.Values.hooks.default.postDelete.validator.checksConfig | indent 4 }}
  slackalerts.config.yaml: |
{{ toYaml .root.Values.hooks.default.postDelete.validator.slackConfig | indent 4 }}

{{/* -------------------------------------
     Post Delete Job
------------------------------------------ */}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $hookObjectName_short }}"
  namespace: "{{ .root.Release.Namespace }}"
  labels:
    {{ include "stdlabels.tpl" .root.stdlabelsargs | indent 4 }}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": {{ .root.Values.hooks.default.postDelete.validator.hookDeletePolicy }}
spec:
  backoffLimit: 0 # retry 0 times
  activeDeadlineSeconds: 300 # max run for 10 minutes (i.e. inclusive of retries)
  template:
    metadata:
      name: "{{ $hookObjectName_short }}"
    spec:
      restartPolicy: Never
      volumes:
        - name: config-volume
          configMap:
            name: {{ $hookObjectName }}
      containers:
        - name: {{ regexReplaceAll "[\\._/:]" .root.Values.hooks.default.postDelete.validator.image "-" }}
          image: "{{ .root.Values.hooks.default.postDelete.validator.image }}"
          command:
            - "checker.py"
          args:
            - "--check-name"
            {{ if .root.Values.hooks.default.postInstallUpgrade.validator.useIngressHost }}
            - "{{ printf "%s-%s%s" .objectIdentifier (.containerPort.port | toString) .root.Values.ingress.dns.fqdnSuffix }}"
            {{ else }}
            - "{{ printf "%s.%s.svc.cluster.local:%s" .objectIdentifier .root.Release.Namespace (.containerPort.port | toString) }}"
            {{ end }}
            - "--target-root-url"
            {{ if .root.Values.hooks.default.postInstallUpgrade.validator.useIngressHost }}
            - "{{ .containerPort.tls | ternary "https" "http" }}://{{ printf "%s-%s%s" .objectIdentifier (.containerPort.port | toString) .root.Values.ingress.dns.fqdnSuffix }}"
            {{ else }}
            - "{{ .containerPort.tls | ternary "https" "http" }}://{{ printf "%s.%s.svc.cluster.local:%s" .objectIdentifier .root.Release.Namespace (.containerPort.port | toString) }}"
            {{ end }}
            - "--max-retries"
            - "{{ .root.Values.hooks.default.postDelete.validator.maxRetries }}"
            - "--sleep-seconds"
            - "{{ .root.Values.hooks.default.postDelete.validator.sleepSeconds }}"
            - "--any-check-fail-exit-code"
            - "1"
            - "--extra-slack-context-props"
            - "creatorId={{ .root.Values.creatorId }}"
            - "--checksdb-filename"
            - "/etc/hc-config/healthchecks.config.yaml"
            - "--slack-config-filename"
            - "/etc/hc-config/slackalerts.config.yaml"
            {{ if .root.Values.hooks.default.postDelete.validator.debugOutput }}
            - "--verbose-output"
            - "--debug-slack-jinja2-context"
            {{ end }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/hc-config
  {{ end }}
{{ end -}}






{{- /* ---------------------------------------------------------------
      Version Specific Ingress Object template

      What follows defines a embedded golang template
      that is invoked later at bottom of this file

      arg dict:
        "root" = $
        "objectIdentifier" = create all objects with this "name"
        "containerPort" = containerPort the Ingress is for
---------------------------------------------------------------------- */}}
{{- define "ingress.template" }}

{{- $ingressFqdn := printf "%s-%s%s" .objectIdentifier (.containerPort.port | toString) .root.Values.ingress.dns.fqdnSuffix }}
---
# Version specific Ingress (one per port)
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: "{{ .root.Release.Namespace }}"
  name: "{{ $ingressFqdn }}"
  labels:
    {{ include "stdlabels.tpl" .root.stdlabelsargs | indent 4 }}

    {{ if .root.Values.ingress.metadata.labels }}
      {{- $root := .root }}
      {{- range $label := .root.Values.ingress.metadata.labels }}
    "{{ $label.name }}": "{{ tpl $label.value $root }}"
      {{- end }}
    {{ end }}
  annotations:
    {{ if eq .containerPort.tls true }}
    ingress.kubernetes.io/protocol: "https"
    {{ else }}
    ingress.kubernetes.io/protocol: "http"
    {{ end }}

    {{ if .root.Values.ingress.metadata.annotations }}
      {{- $root := .root }}
      {{- range $annotation := .root.Values.ingress.metadata.annotations }}
    "{{ $annotation.name }}": "{{ tpl $annotation.value $root }}"
      {{- end }}
    {{ end }}

spec:
  {{ if .root.Values.ingress.tls.enabled }}
  tls:
  - hosts:
    - {{ $ingressFqdn }}
    secretName: {{ .root.Values.ingress.tls.secretName }}
  {{ end }}
  rules:
  - host: {{ $ingressFqdn }}
    http:
      paths:
      - backend:
          serviceName: {{ .root.fullAppIdentifier }}
          servicePort: {{ .containerPort.port }}
{{ end -}}







{{- /* ---------------------------------------------------------------

      Version specific Ingress objects (one per port)

      This also generates the hooks.default (validators) to test each url
      for each Ingress that is generated

      Below we leverage the following templates defined previously:
        - "ingress.template"
        - "default.validator.hooks"
---------------------------------------------------------------------- */}}

{{- range $containerPort := .Values.containerPorts }}
  {{ $ingressTemplateArgs := dict "root" $ "objectIdentifier" $.fullAppIdentifier "containerPort" $containerPort }}
  {{- if and $containerPort.ingress $containerPort.service }}

    {{- /* -----------------------------------------------
          If a "classifier" is present we must verify that
           the containerPort.classifiers contain it to create
           and ingress/hook check for it
    ----------------------------------------------- */}}
    {{- if $containerPort.classifiers }}
      {{- if has $.Values.app.classifier $containerPort.classifiers }}
{{ template "ingress.template" $ingressTemplateArgs }}
{{ template "default.validator.hooks" $ingressTemplateArgs }}

        {{- /* FOR EACH ALIAS, we alter the 'objectIdentifier' key of the args
               and then render a new ingress w/ the alias as the name/fqdn/host */}}
        {{ range $alias := $.Values.aliases }}
          {{ $aliasedIngressTemplateArgs := set $ingressTemplateArgs "objectIdentifier" ($.fullAppIdentifier | replace $.Values.app.name $alias) }}
{{ template "ingress.template" $aliasedIngressTemplateArgs }}
        {{ end }}
      {{ end }}

    {{- /* -----------------------------------------------
        ... otherwise no classifier present so we don't care
    ----------------------------------------------- */}}
    {{ else }}
{{ template "ingress.template" $ingressTemplateArgs }}
{{ template "default.validator.hooks" $ingressTemplateArgs }}

      {{- /* FOR EACH ALIAS, we alter the 'objectIdentifier' key of the args
             and then render a new ingress w/ the alias as the name/fqdn/host */}}
      {{ range $alias := $.Values.aliases }}
        {{ $aliasedIngressTemplateArgs := set $ingressTemplateArgs "objectIdentifier" ($.fullAppIdentifier | replace $.Values.app.name $alias) }}
{{ template "ingress.template" $aliasedIngressTemplateArgs }}
      {{ end }}

    {{ end }}
  {{ end }}
{{ end }}






{{- /* ---------------------------------------------------------------
      Custom Hooks

      This processes any keys defined in values that are
      within -> "hooks.custom"

      Here we leverage the following templates:
        - secret.tpl
        - podtemplate.tpl (for the generated Job Pod template)
---------------------------------------------------------------------- */}}

{{ if .Values.hooks.custom }}
  {{ range $hookName, $hook := .Values.hooks.custom }}

    {{ if $hook.enabled }}

      {{- $fullHookName := printf "%s-hook-%s" $.fullAppIdentifier $hookName }}

      {{- /* If the custom hook has a bootstrapSecret
             defined we will inject a hookBootstrapSecretFilePath
             into hook.custom.[hookname].variables */ -}}
      {{ if $hook.bootstrapSecret }}
        {{- $variables := dict "variables" $hook.variables }}
        {{- $variables := set $ "hookBootstrapSecretFilePath" (printf "%s/%s" $hook.bootstrapSecret.mount.path $hook.bootstrapSecret.mount.fileName)}}
      {{ end }}

      {{- $hookBootstrapSecretName := printf "%s-%s" $fullHookName "bootstrapsecret" }}

  {{- /* ~~~~~~~~~~~~~~~~~~~~~~~~~
    If the custom hook has a bootstrapSecret
    defined and enabled, lets generate it

    IMPORTANT! this assumes the caller has set:
    hooks.custom.[hookname].bootstrapSecret.k8Secret.secretValue

    Which is also `tpl` parsed as it could just reference
    the main root level {{.Values.bootstrapSecret.k8Secret.secretValue}}

    Note: the annotation for "helm.sh/hook-weight" is forced to -100
    as secrets must be created prior to jobs...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */}}
  {{ if $hook.bootstrapSecret }}
    {{ if $hook.bootstrapSecret.enabled }}

      {{ $evaluatedSecretValue := tpl $hook.bootstrapSecret.k8Secret.secretValue $ }}
      {{- $_ := set $hook.bootstrapSecret.k8Secret "secretValue" $evaluatedSecretValue }}

      {{- $secretargs := dict "root" $ "bootstrapSecretName" $hookBootstrapSecretName "bootstrapSecret" $hook.bootstrapSecret }}
      {{- $_ := set $secretargs "annotations" (dict "helm.sh/hook" $hook.hook.type "helm.sh/hook-weight" "-100" "helm.sh/hook-delete-policy" $hook.hook.deletePolicy) }}

{{ include "secret.tpl" $secretargs }}

    {{ end }}
  {{ end }}


---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $fullHookName }}"
  namespace: "{{ $.Release.Namespace }}"
  labels:
    {{ include "stdlabels.tpl" $.stdlabelsargs | indent 4 }}
  annotations:
    "helm.sh/hook": "{{ $hook.hook.type }}"
    "helm.sh/hook-weight": "{{ $hook.hook.weight }}"
    "helm.sh/hook-delete-policy": "{{ $hook.hook.deletePolicy }}"
spec:
  backoffLimit: {{ $hook.job.backoffLimit }}
  activeDeadlineSeconds: {{ $hook.job.activeDeadlineSeconds }}

{{- $podConfig := dict "podName" $fullHookName }}
{{- $podTemplateArgs := dict "root" $ "podconfig" $podConfig }}

{{- $_ := set $podConfig "bootstrapSecretName" $hookBootstrapSecretName }}
{{- $_ := set $podConfig "image" $hook.image }}

{{ if hasKey $hook "restartPolicy" }}
  {{- $_ := set $podConfig "restartPolicy" $hook.restartPolicy }}
{{ end }}

{{ if hasKey $hook "imagePullSecrets" }}
  {{- $_ := set $podConfig "imagePullSecrets" $hook.imagePullSecrets }}
{{ end }}

{{ if hasKey $hook "serviceAccount" }}
  {{- $_ := set $podConfig "serviceAccountName" $hook.serviceAccount.name }}
{{ end }}

{{ if hasKey $hook "bootstrapSecret" }}
  {{- $_ := set $podConfig "bootstrapSecret" $hook.bootstrapSecret }}
{{ end }}

{{ if hasKey $hook "pod" }}
  {{- $_ := set $podConfig "labels" $hook.pod.labels }}
{{ end }}

{{ if hasKey $hook "securityContext" }}
  {{- $_ := set $podConfig "securityContext" $hook.securityContext }}
{{ end }}

{{ if hasKey $hook "containerPorts" }}
  {{- $_ := set $podConfig "containerPorts" $hook.containerPorts }}
{{ end }}

{{ if hasKey $hook "resources" }}
  {{- $_ := set $podConfig "resources" $hook.resources }}
{{ end }}

{{ if hasKey $hook "healthcheck" }}
  {{- $_ := set $podConfig "healthcheck" $hook.healthcheck }}
{{ end }}

{{ if hasKey $hook "env" }}
  {{- $_ := set $podConfig "env" $hook.env }}
{{ end }}

{{ if hasKey $hook "command" }}
  {{- $_ := set $podConfig "command" $hook.command }}
{{ end }}

{{ include "podtemplate.tpl" $podTemplateArgs | indent 2 }}

    {{ end }} {{/* END if hook.enabled */}}

  {{ end }} {{/* END range .Values.hooks.custom */}}

{{ end }} {{/* END if .Values.hooks.custom */}}
